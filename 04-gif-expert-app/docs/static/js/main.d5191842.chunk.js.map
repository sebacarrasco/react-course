{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","length","categories","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","response","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAgBhD,OACI,sBAAMC,SAXW,SAAAC,GACjBA,EAAEC,iBAEEJ,EAAWK,OAAS,IAEpBP,GAAc,SAAAQ,GAAU,OAAKN,GAAL,mBAAoBM,OAC5CL,EAAc,MAKlB,SACI,uBAAOM,KAAK,OAAOC,MAAQR,EAAaS,SAdtB,SAACN,GAAD,OAAOF,EAAcE,EAAEO,OAAOF,a,QCL7C,SAASG,EAAT,GAAyC,EAAlBC,GAAmB,IAAfC,EAAc,EAAdA,MAAOC,EAAO,EAAPA,IAC7C,OACI,sBAAKC,UAAU,yCAAf,UACI,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,kCAAMA,EAAN,U,2BCNCK,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACL,GACE,mCACVN,EAHa,iDAGmCO,UAAUF,GAH7C,kBACL,GADK,oBAEH,oCAFG,SAKIG,MAAMR,GALV,cAKbS,EALa,gBAMIA,EAASC,OANb,uBAMXC,EANW,EAMXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CACHhB,GAAIgB,EAAIhB,GACRC,MAAMe,EAAIf,MACVC,IAAKc,EAAIC,OAAOC,iBAAiBhB,QAZtB,kBAeZY,GAfY,4CAAH,sDCKPK,EAAU,SAAC,GAAoB,IAAjBZ,EAAgB,EAAhBA,SAAgB,ECFf,SAACA,GAAa,MAEZpB,mBAAS,CAC/B0B,KAAM,GACNO,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAiBtC,OATAC,qBAAW,WACPjB,EAAQC,GAAUiB,MAAK,SAAAC,GACnBH,EAAS,CACLT,KAAMY,EACNL,SAAS,SAGlB,CAACb,IAEGc,EDA0BK,CAAanB,GAAjCU,EAf0B,EAe/BJ,KAAaO,EAfkB,EAelBA,QAErB,OACI,qCACI,oBAAIjB,UAAU,oCAAd,SAAmDI,IAClDa,GAAW,2CACZ,qBAAKjB,UAAU,YAAf,SAEQc,EAAOF,KAAI,SAAAC,GAAG,OACN,cAACjB,EAAD,eAA8BiB,GAAZA,EAAIhB,aEJnC2B,EArBM,WAAO,IAAD,EAEaxC,mBAAS,CAAC,aAFvB,mBAEhBO,EAFgB,KAEJR,EAFI,KAIvB,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBACA,6BAGQQ,EAAWqB,KAAI,SAAAR,GAAQ,OACnB,cAAC,EAAD,CAASA,SAAWA,GAAiBA,Y,MCZ7DqB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.d5191842.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ( { setCategories } ) => {\n\n    const [inputValue, setInputValue] = useState(\"\");\n\n    const handleInputChange = (e) => setInputValue(e.target.value);\n\n    const handleSubmit = e => {\n        e.preventDefault(); // Paras prevenir que no se refresque la página\n\n        if (inputValue.length > 1)\n        {\n            setCategories(categories => [inputValue, ...categories]);\n            setInputValue(\"\");\n        }\n    };\n\n    return (\n        <form onSubmit={ handleSubmit }>\n            <input type=\"text\" value={ inputValue } onChange={handleInputChange}/>\n        </form>\n    )\n}\n\n// Validaciones\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n};","import React from 'react'\n\nexport default function GifGridItem( {id, title, url} ) {\n    return (\n        <div className=\"card animate__animated animate__bounce\">\n            <img src={url} alt={title} />\n            <p> { title } </p>\n        </div>\n    )\n}\n","export const getGifs = async(category) => {\n    const limit = 10;\n    const api_key = \"CQ7Ca1jFMZ2nFV55CriEsPMG28IAklq7\";\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=${limit}&api_key=${api_key}`;\n\n    const response = await fetch(url);\n    const { data } = await response.json();\n\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title:img.title,\n            url: img.images.downsized_medium.url\n        }\n    });\n    return gifs;\n}","import React from 'react'\nimport GifGridItem from './GifGridItem';\n// import { getGifs } from '../helpers/getGifs';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\nexport const GifGrid = ( { category } ) => {\n\n    // const [images, setImages] = useState([]);\n\n    // // // Cuando cambie un elemento del arreglo que se le pasa\n    // // // al useEffect, entonces se volverá a aejecutar getGifs\n    // // // (En este caso solo se ejecutará solo una vez ya que\n    // // // category no cambia nunca)\n    // useEffect( () => {\n    //     getGifs(category)\n    //         .then(setImages);\n    // }, [category]);\n\n    // Lo que está comentado arriba es equivalente a lo siguiente\n    // (usando un custom hook que por detrás usa useEffect)\n    const { data:images, loading } = useFetchGifs(category);\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n            {loading && <p>Loading...</p>}\n            <div className=\"card-grid\">\n                    {\n                    images.map(img => \n                            <GifGridItem key={img.id} {...img}/> // Estamos haciendo spread del objeto img para\n                                                                // para pasar sus propiedades \"sueltas\"\n                    )\n                    }\n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n    // Custom hook que se encarga de hacer la request de las imágenes\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    // Importante hacer notar que los efectos no pueden ser async\n    useEffect( () => {\n        getGifs(category).then(imgs => {\n            setState({\n                data: imgs,\n                loading: false\n            });\n        });\n    }, [category])\n\n    return state;\n}","import React, {useState} from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n    const [categories, setCategories] = useState([\"Football\"]);\n    \n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={ setCategories }/>\n            <hr />\n            <ol>\n                {/* Es importante notar que map hace que se retorne cada elemento */}\n                {\n                    categories.map(category => \n                        <GifGrid category={ category } key={ category }/>\n                    )\n                }\n            </ol>\n        </>\n    )\n};\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}